public abstract class Car		// abstract class only cant be initialzed as an abstract
    {
        public Car (int speed, int width, int height)       // public constructor to initialize cars rectangle data
        {
            _speed = speed;
            _width = width;
            _height = height;
        }
        /// <summary>
        ///  Creates the rectangle of the Car using x,y,width, height
        ///  ovveridden in dervied classes
        /// </summary>
        /// <returns>Will return the rectangle of the Car</returns>
        public abstract Rectangle GetRect();  

        /// <summary>
        ///  Call the dervied classes overrided VShowCar()
        /// ie: Horizontal and Vertical Car has different VShowCar methods
        /// </summary>
        public void ShowCar()
        {
            VShowCar();
        }
        /// <summary>
        ///  abstract method to overriden in derived car classes
        /// </summary>
        protected abstract void VShowCar();
        /// <summary>
        /// Call the dervied classes overrided VMoveCar()
        /// ie: Horizontal and Vertical Car has different VMoveCar methods
        /// </summary>
        public void MoveCar()
        {
            VMoveCar();
        }
        /// <summary>
        /// abstract method to overriden in derived car classes
        /// </summary>
        protected abstract void VMoveCar();
        /// <summary>
        /// If the rectangle of two cars is touching they are equal
        /// </summary>
        /// <param name="obj">Vechile to compare aganist</param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (!(obj is Car))
                return false;
            Car arg = obj as Car;
            return this.GetRect().IntersectsWith(arg.GetRect());
        }
        /// <summary>
        /// Whatever gethashcode does still not sure
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            return 0;
        }
        /// <summary>
        /// Checks if the users click was on a Car
        /// </summary>
        /// <param name="click">click point on the PicDrawer</param>
        /// <returns></returns>
        public bool PointOnCar (Point click)
        {
            return this.GetRect().Contains(click);
        }
        /// <summary>
        /// Check if a vechile has reached the edge of the drawer in any direction.
        /// remove the vechile if it has
        /// </summary>
        /// <param name="car">boundary check on this car</param>
        /// <returns></returns>
        public static bool OutofBounds (Car car )
        {
            Rectangle leftWall = new Rectangle(0, 0, 1, _canvas.ScaledHeight);      // left wall rectangle boundary
            Rectangle rightWall = new Rectangle(_canvas.ScaledWidth, 0, 1, _canvas.ScaledHeight);   // right wall rectangle boundary
            Rectangle topWall = new Rectangle(0, 0, _canvas.ScaledWidth, 1);            // top wall rectangle boundary
            Rectangle botWall = new Rectangle(0, _canvas.ScaledHeight, _canvas.ScaledWidth, 1);     // bottom wall rectangle boundary

            if (leftWall.IntersectsWith(car.GetRect()))     // left boundary check
                return true;
            return false;           // retrun false if car is within drawer on all sides
        }
        /// <summary>
        /// Will set speed type to one of three options after each click
		/// base method called by Car base abstract class
        /// </summary>
        public void ToggleSpeed()
        {
            if (_cSpeed == SpeedType.QuarterSpeed)
                _cSpeed = SpeedType.HalfSpeed;
            else if (_cSpeed == SpeedType.HalfSpeed)
                _cSpeed = SpeedType.FullSpeed;
            else
                _cSpeed = SpeedType.QuarterSpeed;
        }
    }
    /// <summary>
    ///  horizontal cars will only spawn in the horizontal lanes
    ///  their x_values will be changed with Vmovecar based on CAR class's speed
    /// </summary>
    public abstract class HorizontalCar : Car
    {
        /// <summary>
        ///  Horizontal Car constructor that will place the car on either right or left lanes
        ///  uses base Car class's base constructor for rectangle data. This constructor
        ///  sets starting point of car based on speed
        /// </summary>
        /// <param name="speed">will determine direction and start point of car</param>
        /// <param name="width">already assigned in base ctor</param>
        /// <param name="height">already assigned in base ctor</param>
        public HorizontalCar(int speed, int width, int height) : base(speed, width, height)
        {
            if (speed < 0) // car going towards the left of the drawer
            {
                _Xval = Car._canvas.ScaledWidth - width - 2;
                _Yval = Car.leftList[Car._rand.Next(leftList.Count)];
            }
            else  // car driving toward the right of the drawer 
            {
                _Xval = 10;
                _Yval = Car.rightList[Car._rand.Next(rightList.Count)];
            }
        }
        /// <summary>
        /// Check enum for to get display. Speed then move car by display speed
        /// horizontal movement for horizontal cars  ie:change xval
        /// </summary>
        protected override void VMoveCar() 
        {
            int displaySpeed = _speed; // will be determined by base speed and current enum speed
            switch (_cSpeed)
            {
                case SpeedType.QuarterSpeed:
                    if (displaySpeed / 2 != 0)
                         displaySpeed = _speed / 4;
                    else
                        _speed = 1;
            }
            _Xval += displaySpeed;      // update by display speed
        }
    }
	/// <summary>
    /// Animate method to be used for switching of colors or shapes
    /// </summary>
    public interface IAnimatable
    {
        void Animate();
    }
	// Derived from horizontal car which is derived from CAR , can use ianimantable interface
    public class HAmbulance : HorizontalCar, IAnimatable
    {
        protected Color _color = RandColor.GetColor();    // random car color member
        private bool RB = true;         // bool for animatie switching 

        /// <summary>
        /// Hambulance ctor that gets all needed data from its base classes
		/// blank ctor is using base classes Car and horizontal car
        /// </summary>
        /// <param name="speed">already used in base ctor</param>
        /// <param name="width">already assigned in base ctor</param>
        /// <param name="height">already assigned in base ctor</param>
        public HAmbulance(int speed=7, int width = 90, int height = 40) : base(speed, width, height)
        { }
        /// <summary>
        /// Get the rectangle of the Vsedan based on x,y,width,height base class members
        /// </summary>
        /// <returns>Returns the rectangle based on current base member values</returns>
        public override Rectangle GetRect()
        {
            Rectangle tempR = new Rectangle(_Xval, _Yval, _width, _height);
            return tempR;
        }
        /// <summary>
        /// Show the car on the drawer. Two versions of siren color for animation
        /// based on RB bool that switches in animate
        /// This method is called by the base class
        /// </summary>
        protected override void VShowCar()
        {
            Rectangle tempR = GetRect();
            Car._canvas.AddRectangle(tempR.X, tempR.Y, tempR.Width, tempR.Height, _color);
            if (RB)
                Car._canvas.AddLine(tempR.X + (tempR.Width/2), tempR.Y, tempR.X + (tempR.Width / 2), tempR.Y + tempR.Height, Color.Red, 5);
           else  
                Car._canvas.AddLine(tempR.X + (tempR.Width / 2), tempR.Y, tempR.X + (tempR.Width / 2), tempR.Y + tempR.Height, Color.Yellow, 5);       
        }
        /// <summary>
        ///  Switches a bool for ShowCar to check if it for dispaly of red or yellow Siren
        /// </summary>
        public void Animate()
        {
            if (RB) RB = false; 
            else RB = true;                  
        }
    }

	 allVechList.RemoveAll(c => Car.OutofBounds(c));         // check if any cars have hit one of the edges
            allVechList.ForEach(c => c.MoveCar());      // move all vechiles
            foreach (Car c in allVechList)
            {
                if (c is IAnimatable)		// check if car uses IAnimatable interface
                    (c as IAnimatable).Animate();	// upcast as Ianimatable and invoke animate
            }
            allVechList.ForEach(c => c.ShowCar());      // show all vechiles
